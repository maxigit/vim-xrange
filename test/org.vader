Include: common.vader
Execute (setup):
  let b:ranger = yrange#ranger#org_header()
Given (Org mode two headingstwo) :
  * Heading 1
  ** Heading 1.1
  end of  heading 1.1
  ** Heading 1.2
  endof Heading 1 and Heading 1.2
Execute (find next range):
  let range =  b:ranger.search_start('c')
  AssertEqual [1,'Heading 1'] , [range.start, range.name]
  AssertIn {'start':1,'name':'Heading 1'} , range

  let range2 = b:ranger.search_start('')
  AssertEqual [2, 'Heading 1.1'] ,  [range2.start, range2.name]
  AssertEqual 3, range2.subranger.level 
  AssertEqual 3            , range2.search_end('')
  normal gg
  AssertEqual 5            , range.search_end('')
Execute (find ends):
  let range = yrange#ranger#search_range(b:ranger,'cW')
  AssertIn {'start':1, 'end':5}, range
  call cursor(2,0)
  let range = yrange#ranger#search_range(b:ranger,'cW')
  AssertIn {'start':2, 'end':3}, range
  call cursor(3,0)
  let range = yrange#ranger#search_range(b:ranger,'cW')
  AssertIn {'start':4, 'end':5}, range
Execute (find by name):
  let range = yrange#ranger#search_range(b:ranger,'c','Heading 1.1')
  AssertIn {'start':2, 'end':3}, range
Execute (find current):
  let range = yrange#ranger#current_range(b:ranger)
  AssertIn {'start':1, 'end':5}, range
  call cursor(3,0)
  let range = yrange#ranger#current_range(b:ranger)
  AssertIn {'start':2, 'end':3}, range
Execute (find current at the end):
  call cursor(5,0)
  let range = yrange#ranger#current_range(b:ranger)
  AssertIn {'start':4, 'end':5}, range

