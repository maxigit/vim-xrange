Before:
  let b:ranger = yrange#ranger#default()
Given (two ranges) :
  Nothing
  :range1:
  .range1.
  :range2:
  .range2.
Execute (find next range):
  let range =  b:ranger.search_start('c')
  AssertEqual [2,'range1'] , [range.start, range.name]

  let range2 = b:ranger.search_start('')
  AssertEqual [4, 'range2'] ,  [range2.start, range2.name]
  AssertEqual 5            , range2.search_end('')
Execute (find by name):
  let range =  b:ranger.search_start('n','range2')
  AssertEqual [4, 'range2'], [range.start, range.name]
  let range = b:ranger.search_start('','range1')
  AssertEqual [2, 'range1'], [range.start, range.name]

Given (find current range if cursor not at the beginning):
  :range:
  .range.
Do:
  $
Execute:
  AssertEqual 'range' , b:ranger.search_start('c').name

--------------------------------------------------
Given (two ranges with same name) :
  Nothing
  :range:
  .range.
  :range:
  .range.
Execute (find boths ranges):
  let range =  b:ranger.search_start('c')
  AssertEqual [2,'range'] , [range.start, range.name]
  normal j " next line
  let range =  b:ranger.search_start('c')
  AssertEqual [4,'range'] , [range.start, range.name]


Given (one range):
  :range:
  1
  2
  3
  .range.
Execute (it finds end):
  let range = yrange#ranger#search_range(b:ranger,'cW')
  AssertIn {'start':1,'end':5}, range

Given (two non nested ranges):
  :range:
  1
  2
  3
  .range.
  :range:
  1
  2
  3
  .range.
Execute (it finds end):
  let range = yrange#ranger#search_range(b:ranger,'c')
  AssertIn {'start':1,'end':5}, range
  let range2 = yrange#ranger#search_range(b:ranger,'W')
  AssertIn {'start':6,'end':10}, range2
Given (two nested ranges with the same name):
  :range:
  2
  3
  4
  :range:
  6
  7
  .range.
  9
  .range.
Execute (it finds end):
  let range = yrange#ranger#search_range(b:ranger,'c')
  AssertIn {'start':1,'end':10}, range
  call cursor(2,0)
  let range2 = yrange#ranger#search_range(b:ranger,'W')
  AssertIn {'start':5,'end':8}, range2
Execute (it finds current on cursor):
  let range = yrange#ranger#current_range(b:ranger)
  AssertIn {'start':1, 'end':10}, range
  call cursor(2,0)
  let range = yrange#ranger#current_range(b:ranger)
  AssertIn {'start':1, 'end':10}, range
Execute (it finds current on cursor and skip children):
  call cursor(9,0)
  let range = yrange#ranger#current_range(b:ranger)
  AssertIn {'start':1, 'end':10}, range
Execute (A):
  call cursor(10,0)
  let range = yrange#ranger#current_range(b:ranger)
  AssertIn {'start':1, 'end':10}, range
Execute (it finds current nested):
  call cursor(5,0)
  let range = yrange#ranger#current_range(b:ranger)
  AssertIn {'start':5, 'end':8}, range
Execute (it finds next):
  let range =yrange#ranger#next_range(b:ranger)
  AssertIn {'start':5, 'end':8}, range
  " wrap
  let range =yrange#ranger#next_range(b:ranger)
  AssertIn {'start':1, 'end':10}, range
Execute (it finds parent):
  let range =yrange#ranger#parent_range(b:ranger)
  AssertEqual {}, range
  call cursor (6,0)
  let range =yrange#ranger#parent_range(b:ranger)
  AssertIn {'start':1, 'end':10}, range

